* Overview

This is the master repo for gitgratitude.com.

It's deployed on a kubenetes cluster build as described

1. [[https://willschenk.com/articles/2021/setting_up_knative/][Setting up knative]]
2. [[https://willschenk.com/articles/2021/serving_a_knative_function_on_the_root/][Serving services on the root]]
3. [[https://willschenk.com/articles/2021/next_js_with_prisma/][NextJS Knative service with Prisma]]

* Deployment

** Script
There's a [[kproj]] script that handles pushing out new versions.

1. It builds the images with =--platform linux/amd64=
2. Pushes the images to dockerhub
3. does =kn service update= to activate the new version
4. Sets up a local tunnel to the postgres instance and runs =npm prisma migrate= to sync up the database
5. Optionally can run =npx prsima studio= over a similar tunnel

*** Usage

There's a =database= section and a =global= section which will be managed
automatically.  To add or configure a service, add a stanza with the
same name as a directory.  If that directory has a =Dockerfile= it in,
it will be considered a deployable service.

Example:

#+begin_src toml
[repositories]
binding = true
config_maps = ["postgres-postgresql-repositories"]
events = ["git.done"]
image = "wschenk/repositories"
schema = "repositories"
service = "repositories"
#+end_src

| Name        | Description                                                                    |
| =binding=     | Setup a =K_SINK= to send events to the default broker                            |
| =config_maps= | Which config maps should be injected into the environment                      |
| =events=      | List of events that trigger this service                                       |
| =image=       | Tag of the image to build locally and deploy remotely                          |
| =schema=      | Database schema to use, config map will be created with a correct =DATABASE_URL= |
| =service=     | The name of the remote service                                                 |

Commands are:

#+begin_src bash
  ./kproj --help
  kproj build           # Builds a service
  kproj db              # Database functions
  kproj doctor          # Sync the state of the cluster
  kproj help [COMMAND]  # Describe available commands or one specific command
  kproj info name       # queries the cluster
  kproj up name         # Deploys a service
  kproj update          # Pushes configuration to server
#+end_src

** Config

[[./deployment.toml][deployment.toml]] has a list of services and data around how they are
deployed.

Block storage is in

[[kubernetes/workspace.yaml]]

#+begin_src bash :results output
  kubectl apply -f kubernetes/workspace.yaml
#+end_src

#+RESULTS:
: persistentvolumeclaim/git-workspace created

And then attach the volume to the =vcs-git= service:

#+begin_src bash :results output
  kn service update vcs-git --mount /workspace=git-workspace --env WORK_VOLUME=/workspace
#+end_src

#+RESULTS:

** PGAdmin

#+begin_src bash :results output
  kubectl apply -f kubernetes/pgadmin.yaml
#+end_src

Get the password:

#+begin_src bash 
  kubectl get secret --namespace default postgres-postgresql -o jsonpath="{.data.postgresql-password}" | base64 --decode | pbcopy
#+end_src

Then start up a port forwarder:

#+begin_src bash
  kubectl port-forward svc/pgadmin-service 4000:80
#+end_src

Once you are done, you can kill =pgadmin=

#+begin_src bash :results output
  kubectl delete -f kubernetes/pgadmin.yaml
#+end_src

#+RESULTS:
: configmap "pgadmin-config" deleted
: service "pgadmin-service" deleted
: statefulset.apps "pgadmin" deleted

* Services

** [[projects]]
NextJS app that contains the front end as well as the projects database

** [[repositories]]

NextJS that contains the frontend to the repositories

** [[eco-rubygems]]
ruby-base gateway to the rubygems ecosystem

** TODO eco-npm
node-based gateway to the npm ecosystem

** TODO forge-github
Issues and other project level data

** [[lock-gemfile]]
ruby-based parsing of =Gemfile.lock=

** TODO lock-packagelock
node-based parsing of =package-lock.json=

** [[lock-yarnlock]]
node-based parsing of =yarn.lock=

** TODO vcs-git
Downloading and analyising the repo

** TODO watcher
Service to monitor URLs and trigger recalculations

